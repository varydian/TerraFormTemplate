parameters:
  - name: workingDirectory
    type: string
    default: 'terraform'
  - name: commandOptions
    type: string
    default: ''
  - name: command
    type: string
    default: 'plan'
    values:
      - plan
      - apply
      - destroy
      - validate
      - output

steps:
  - task: terraformInstaller@0
    displayName: Terraform Install
    inputs:
      terraformVersion: '0.14.0'
  - task: TerraformTaskV1@0
    name: TerraformInit
    displayName: Terraform Init
    inputs:
      command: 'init'
      provider: 'azurerm'
      workingDirectory: ${{ parameters.workingDirectory }}
      backendAzureRmKey: $(backendAzureRmKey)
      backendServiceArm: $(backendServiceArm)
      backendAzureRmResourceGroupName: $(backendAzureRmResourceGroupName)
      backendAzureRmStorageAccountName: $(backendAzureRmStorageAccountName)
      backendAzureRmContainerName: $(backendAzureRmContainerName)
  - task: TerraformTaskV1@0
    name: TerraformCommand
    displayName: Terraform ${{ parameters.command }}
    inputs:
      command: ${{ parameters.command }}
      commandOptions: ${{ parameters.commandOptions }}
      provider: 'azurerm'
      workingDirectory: ${{ parameters.workingDirectory }}
      environmentServiceNameAzureRM: $(backendServiceArm)
  - ${{ if eq(parameters.command, 'apply') }}:
    - powershell: |
        $TerraformOutput = Get-Content "$(TerraformCommand.jsonOutputVariablesPath)" | ConvertFrom-Json
        $TerraformOutput | Get-Member -MemberType NoteProperty | % { $o = $TerraformOutput.($_.Name); Write-Host "##vso[task.setvariable variable=$($_.Name);isoutput=true;issecret=$($o.sensitive)]$($o.value)" }
      name: TerraformOutput
      displayName: Terraform Output
